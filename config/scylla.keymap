#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define SYM 1
#define INT 2

&led_strip {
    chain-length = <29>;

    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <29>; // Uncomment if using only per-key LEDs.
};

&mt {
    tapping-term-ms = <350>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <100>;
    hold-trigger-on-release;
};

/ {
    macros {
        sqt_spc: sqt_spc {
            label = "ZM_sqt_spc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&kp SQT &kp SPACE>;
        };

        grave_spc: grave_spc {
            label = "ZM_grave_spc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&kp GRAVE &kp SPACE>;
        };

        tilde_spc: tilde_spc {
            label = "ZM_tilde_spc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&kp TILDE &kp SPACE>;
        };

        caret_spc: caret_spc {
            label = "ZM_tilde_spc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&kp CARET &kp SPACE>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp INT_YEN  &kp N1              &kp N2          &kp N3          &kp N4            &kp N5          &kp N6         &kp N7             &kp N8           &kp N9           &kp N0          &kp DEL
&kp TAB      &kp Q               &kp W           &kp E           &kp R             &kp T           &kp Y          &kp U              &kp I            &kp O            &kp P           &kp LBKT
&lt 3 ESC    &mt LEFT_CONTROL A  &mt LEFT_ALT S  &mt LEFT_GUI D  &mt LEFT_SHIFT F  &kp G           &kp H          &mt RIGHT_SHIFT J  &mt RIGHT_GUI K  &mt RIGHT_ALT L  &mt RCTRL SEMI  &kp SQT
&kp LSHIFT   &kp Z               &kp X           &kp C           &kp V             &kp B           &kp N          &kp M              &kp COMMA        &kp DOT          &kp SLASH       &kp RSHFT
                                                 &mo 1           &kp SPACE         &kp LEFT_GUI    &kp BACKSPACE  &kp SPACE          &mo INT
                                                                 &kp LCTRL         &kp LALT        &kp RALT       &kp RETURN
            >;
        };

        SYM {
            bindings = <
&out OUT_TOG     &rgb_ug RGB_COLOR_HSB(0,63,42)  &rgb_ug RGB_COLOR_HSB(54,54,43)  &rgb_ug RGB_COLOR_HSB(111,55,42)  &rgb_ug RGB_COLOR_HSB(230,56,49)  &rgb_ug RGB_COLOR_HSB(297,56,47)    &trans      &rgb_ug RGB_HUI  &rgb_ug RGB_SAI           &rgb_ug RGB_EFF  &trans         &out OUT_BLE
&grave_spc       &ext_power EP_TOG               &kp N7                           &kp N8                            &kp N9                            &caret_spc                          &kp LS(N6)  &kp LS(N7)       &kp LS(N8)                &kp LS(N9)       &kp LS(N0)     &kp LS(RBKT)
&rgb_ug RGB_TOG  &trans                          &kp N4                           &kp N5                            &kp N6                            &trans                              &kp HOME    &kp PAGE_DOWN    &kp PAGE_UP               &kp END          &trans         &kp RBKT
&trans           &kp N0                          &kp N1                           &kp N2                            &kp N3                            &trans                              &kp F12     &kp NON_US_BSLH  &kp LS(NON_US_BACKSLASH)  &kp GRAVE        &kp LS(GRAVE)  &trans
                                                                                  &trans                            &trans                            &trans                              &trans      &trans           &trans
                                                                                                                    &trans                            &trans                              &trans      &trans
            >;
        };

        INT {
            bindings = <
&bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &none       &none       &bt BT_CLR    &none     &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_EFR  &none            &none
&rgb_ug RGB_TOG  &kp RS(N1)    &kp LS(N2)    &kp RS(N3)  &kp RS(N4)  &kp RS(N5)    &kp AMPS  &kp LS(RA(N8))   &kp LA(N8)       &kp LA(N9)       &kp LS(RA(N9))   &none
&none            &kp F1        &kp F2        &kp F3      &kp F4      &kp F5        &kp F6    &kp MINUS        &kp EQUAL        &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp K_PLAY_PAUSE
&none            &kp F7        &kp F8        &kp F9      &kp F10     &kp F11       &kp F12   &kp BSLH         &kp C_NEXT       &kp C_VOL_DN     &kp C_VOL_UP     &none
                                             &none       &trans      &none         &none     &none            &none
                                                         &none       &none         &none     &none
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &soft_off
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans        &trans     &trans  &trans
                        &trans  &trans  &trans    &trans    &trans    &trans
                                &trans  &trans    &trans    &trans
            >;
        };
    };
};
